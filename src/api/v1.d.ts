/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/v1/branches/{branch_id}": {
    /**
     * Get database branch config 
     * @description Fetches configurations of the specified database branch
     */
    get: operations["v1-get-a-branch-config"];
    /**
     * Delete a database branch 
     * @description Deletes the specified database branch
     */
    delete: operations["v1-delete-a-branch"];
    /**
     * Update database branch config 
     * @description Updates the configuration of the specified database branch
     */
    patch: operations["v1-update-a-branch-config"];
  };
  "/v1/branches/{branch_id}/push": {
    /**
     * Pushes a database branch 
     * @description Pushes the specified database branch
     */
    post: operations["v1-push-a-branch"];
  };
  "/v1/branches/{branch_id}/merge": {
    /**
     * Merges a database branch 
     * @description Merges the specified database branch
     */
    post: operations["v1-merge-a-branch"];
  };
  "/v1/branches/{branch_id}/reset": {
    /**
     * Resets a database branch 
     * @description Resets the specified database branch
     */
    post: operations["v1-reset-a-branch"];
  };
  "/v1/projects": {
    /**
     * List all projects 
     * @description Returns a list of all projects you've previously created.
     */
    get: operations["v1-list-all-projects"];
    /** Create a project */
    post: operations["v1-create-a-project"];
  };
  "/v1/organizations": {
    /**
     * List all organizations 
     * @description Returns a list of organizations that you currently belong to.
     */
    get: operations["v1-list-all-organizations"];
    /** Create an organization */
    post: operations["v1-create-an-organization"];
  };
  "/v1/oauth/authorize": {
    /** [Beta] Authorize user through oauth */
    get: operations["v1-authorize-user"];
  };
  "/v1/oauth/token": {
    /** [Beta] Exchange auth code for user's access and refresh token */
    post: operations["v1-exchange-oauth-token"];
  };
  "/v1/oauth/revoke": {
    /** [Beta] Revoke oauth app authorization and it's corresponding tokens */
    post: operations["v1-revoke-token"];
  };
  "/v1/snippets": {
    /** Lists SQL snippets for the logged in user */
    get: operations["v1-list-all-snippets"];
  };
  "/v1/snippets/{id}": {
    /** Gets a specific SQL snippet */
    get: operations["v1-get-a-snippet"];
  };
  "/v1/projects/{ref}/api-keys": {
    /** Get project api keys */
    get: operations["v1-get-project-api-keys"];
    /** [Alpha] Creates a new API key for the project */
    post: operations["createApiKey"];
  };
  "/v1/projects/{ref}/api-keys/{id}": {
    /** [Alpha] Get API key */
    get: operations["getApiKey"];
    /** [Alpha] Deletes an API key for the project */
    delete: operations["deleteApiKey"];
    /** [Alpha] Updates an API key for the project */
    patch: operations["updateApiKey"];
  };
  "/v1/projects/{ref}/branches": {
    /**
     * List all database branches 
     * @description Returns all database branches of the specified project.
     */
    get: operations["v1-list-all-branches"];
    /**
     * Create a database branch 
     * @description Creates a database branch from the specified project.
     */
    post: operations["v1-create-a-branch"];
    /**
     * Disables preview branching 
     * @description Disables preview branching for the specified project
     */
    delete: operations["v1-disable-preview-branching"];
  };
  "/v1/projects/{ref}/custom-hostname": {
    /** [Beta] Gets project's custom hostname config */
    get: operations["v1-get-hostname-config"];
    /** [Beta] Deletes a project's custom hostname configuration */
    delete: operations["v1-Delete hostname config"];
  };
  "/v1/projects/{ref}/custom-hostname/initialize": {
    /** [Beta] Updates project's custom hostname configuration */
    post: operations["v1-update-hostname-config"];
  };
  "/v1/projects/{ref}/custom-hostname/reverify": {
    /** [Beta] Attempts to verify the DNS configuration for project's custom hostname configuration */
    post: operations["v1-verify-dns-config"];
  };
  "/v1/projects/{ref}/custom-hostname/activate": {
    /** [Beta] Activates a custom hostname for a project. */
    post: operations["v1-activate-custom-hostname"];
  };
  "/v1/projects/{ref}/network-bans/retrieve": {
    /** [Beta] Gets project's network bans */
    post: operations["v1-list-all-network-bans"];
  };
  "/v1/projects/{ref}/network-bans": {
    /** [Beta] Remove network bans. */
    delete: operations["v1-delete-network-bans"];
  };
  "/v1/projects/{ref}/network-restrictions": {
    /** [Beta] Gets project's network restrictions */
    get: operations["v1-get-network-restrictions"];
  };
  "/v1/projects/{ref}/network-restrictions/apply": {
    /** [Beta] Updates project's network restrictions */
    post: operations["v1-update-network-restrictions"];
  };
  "/v1/projects/{ref}/pgsodium": {
    /** [Beta] Gets project's pgsodium config */
    get: operations["v1-get-pgsodium-config"];
    /** [Beta] Updates project's pgsodium config. Updating the root_key can cause all data encrypted with the older key to become inaccessible. */
    put: operations["v1-update-pgsodium-config"];
  };
  "/v1/projects/{ref}/postgrest": {
    /** Gets project's postgrest config */
    get: operations["v1-get-postgrest-service-config"];
    /** Updates project's postgrest config */
    patch: operations["v1-update-postgrest-service-config"];
  };
  "/v1/projects/{ref}": {
    /** Gets a specific project that belongs to the authenticated user */
    get: operations["v1-get-project"];
    /** Deletes the given project */
    delete: operations["v1-delete-a-project"];
  };
  "/v1/projects/{ref}/secrets": {
    /**
     * List all secrets 
     * @description Returns all secrets you've previously added to the specified project.
     */
    get: operations["v1-list-all-secrets"];
    /**
     * Bulk create secrets 
     * @description Creates multiple secrets and adds them to the specified project.
     */
    post: operations["v1-bulk-create-secrets"];
    /**
     * Bulk delete secrets 
     * @description Deletes all secrets with the given names from the specified project
     */
    delete: operations["v1-bulk-delete-secrets"];
  };
  "/v1/projects/{ref}/ssl-enforcement": {
    /** [Beta] Get project's SSL enforcement configuration. */
    get: operations["v1-get-ssl-enforcement-config"];
    /** [Beta] Update project's SSL enforcement configuration. */
    put: operations["v1-update-ssl-enforcement-config"];
  };
  "/v1/projects/{ref}/types/typescript": {
    /**
     * Generate TypeScript types 
     * @description Returns the TypeScript types of your schema for use with supabase-js.
     */
    get: operations["v1-generate-typescript-types"];
  };
  "/v1/projects/{ref}/vanity-subdomain": {
    /** [Beta] Gets current vanity subdomain config */
    get: operations["v1-get-vanity-subdomain-config"];
    /** [Beta] Deletes a project's vanity subdomain configuration */
    delete: operations["v1-deactivate-vanity-subdomain-config"];
  };
  "/v1/projects/{ref}/vanity-subdomain/check-availability": {
    /** [Beta] Checks vanity subdomain availability */
    post: operations["v1-check-vanity-subdomain-availability"];
  };
  "/v1/projects/{ref}/vanity-subdomain/activate": {
    /** [Beta] Activates a vanity subdomain for a project. */
    post: operations["v1-activate-vanity-subdomain-config"];
  };
  "/v1/projects/{ref}/upgrade": {
    /** [Beta] Upgrades the project's Postgres version */
    post: operations["v1-upgrade-postgres-version"];
  };
  "/v1/projects/{ref}/upgrade/eligibility": {
    /** [Beta] Returns the project's eligibility for upgrades */
    get: operations["v1-get-postgres-upgrade-eligibility"];
  };
  "/v1/projects/{ref}/upgrade/status": {
    /** [Beta] Gets the latest status of the project's upgrade */
    get: operations["v1-get-postgres-upgrade-status"];
  };
  "/v1/projects/{ref}/readonly": {
    /** Returns project's readonly mode status */
    get: operations["v1-get-readonly-mode-status"];
  };
  "/v1/projects/{ref}/readonly/temporary-disable": {
    /** Disables project's readonly mode for the next 15 minutes */
    post: operations["v1-disable-readonly-mode-temporarily"];
  };
  "/v1/projects/{ref}/read-replicas/setup": {
    /** [Beta] Set up a read replica */
    post: operations["v1-setup-a-read-replica"];
  };
  "/v1/projects/{ref}/read-replicas/remove": {
    /** [Beta] Remove a read replica */
    post: operations["v1-remove-a-read-replica"];
  };
  "/v1/projects/{ref}/health": {
    /** Gets project's service health status */
    get: operations["v1-get-services-health"];
  };
  "/v1/projects/{ref}/config/auth/signing-keys": {
    /** [Alpha] List all signing keys for the project */
    get: operations["listSigningKeysForProject"];
    /** [Alpha] Create a new signing key for the project in standby status */
    post: operations["createSigningKeyForProject"];
  };
  "/v1/projects/{ref}/config/auth/signing-keys/{id}": {
    /** [Alpha] Get information about a signing key */
    get: operations["getSigningKeyForProject"];
    /** [Alpha] Remove a signing key from a project, where the status is previously_used */
    delete: operations["deleteSigningKey"];
    /** [Alpha] Update a signing key, mainly its status */
    patch: operations["patchSigningKey"];
  };
  "/v1/projects/{ref}/config/storage": {
    /** Gets project's storage config */
    get: operations["v1-get-storage-config"];
    /** Updates project's storage config */
    patch: operations["v1-update-storage-config"];
  };
  "/v1/projects/{ref}/config/database/postgres": {
    /** Gets project's Postgres config */
    get: operations["v1-get-postgres-config"];
    /** Updates project's Postgres config */
    put: operations["v1-update-postgres-config"];
  };
  "/v1/projects/{ref}/config/database/pgbouncer": {
    /** Get project's pgbouncer config */
    get: operations["v1-get-project-pgbouncer-config"];
  };
  "/v1/projects/{ref}/config/database/pooler": {
    /** Gets project's supavisor config */
    get: operations["getSupavisorConfig"];
    /** Updates project's supavisor config */
    patch: operations["updateSupavisorConfig"];
  };
  "/v1/projects/{ref}/config/auth": {
    /** Gets project's auth config */
    get: operations["v1-get-auth-service-config"];
    /** Updates a project's auth config */
    patch: operations["v1-update-auth-service-config"];
  };
  "/v1/projects/{ref}/config/auth/third-party-auth": {
    /** Lists all third-party auth integrations */
    get: operations["listTPAForProject"];
    /** Creates a new third-party auth integration */
    post: operations["createTPAForProject"];
  };
  "/v1/projects/{ref}/config/auth/third-party-auth/{tpa_id}": {
    /** Get a third-party integration */
    get: operations["getTPAForProject"];
    /** Removes a third-party auth integration */
    delete: operations["deleteTPAForProject"];
  };
  "/v1/projects/{ref}/pause": {
    /** Pauses the given project */
    post: operations["v1-pause-a-project"];
  };
  "/v1/projects/{ref}/restore": {
    /** Lists available restore versions for the given project */
    get: operations["v1-list-available-restore-versions"];
    /** Restores the given project */
    post: operations["v1-restore-a-project"];
  };
  "/v1/projects/{ref}/restore/cancel": {
    /** Cancels the given project restoration */
    post: operations["v1-cancel-a-project-restoration"];
  };
  "/v1/projects/{ref}/billing/addons": {
    /** Lists project addons */
    get: operations["v1-list-project-addons"];
    /** Applies project addon */
    patch: operations["v1-apply-project-addon"];
  };
  "/v1/projects/{ref}/billing/addons/{addon_variant}": {
    /** Removes project addon */
    delete: operations["v1-remove-project-addon"];
  };
  "/v1/projects/{ref}/advisors/performance": {
    /**
     * Gets project performance advisors. 
     * @deprecated 
     * @description This is an **experimental** endpoint. It is subject to change or removal in future versions. Use it with caution, as it may not remain supported or stable.
     */
    get: operations["getPerformanceAdvisors"];
  };
  "/v1/projects/{ref}/advisors/security": {
    /**
     * Gets project security advisors. 
     * @deprecated 
     * @description This is an **experimental** endpoint. It is subject to change or removal in future versions. Use it with caution, as it may not remain supported or stable.
     */
    get: operations["getSecurityAdvisors"];
  };
  "/v1/projects/{ref}/analytics/endpoints/logs.all": {
    /**
     * Gets project's logs 
     * @description Executes a SQL query on the project's logs.
     * 
     * Either the 'iso_timestamp_start' and 'iso_timestamp_end' parameters must be provided.
     * If both are not provided, only the last 1 minute of logs will be queried.
     * The timestamp range must be no more than 24 hours and is rounded to the nearest minute. If the range is more than 24 hours, a validation error will be thrown.
     */
    get: operations["getLogs"];
  };
  "/v1/projects/{ref}/database/migrations": {
    /**
     * [Beta] List applied migration versions 
     * @description Only available to selected partner OAuth apps
     */
    get: operations["v1-list-migrations"];
    /**
     * [Beta] Apply a database migration 
     * @description Only available to selected partner OAuth apps
     */
    post: operations["v1-apply-a-migration"];
  };
  "/v1/projects/{ref}/database/query": {
    /** [Beta] Run sql query */
    post: operations["v1-run-a-query"];
  };
  "/v1/projects/{ref}/database/webhooks/enable": {
    /** [Beta] Enables Database Webhooks on the project */
    post: operations["v1-enable-database-webhook"];
  };
  "/v1/projects/{ref}/database/context": {
    /**
     * Gets database metadata for the given project. 
     * @deprecated 
     * @description This is an **experimental** endpoint. It is subject to change or removal in future versions. Use it with caution, as it may not remain supported or stable.
     */
    get: operations["getDatabaseMetadata"];
  };
  "/v1/projects/{ref}/functions": {
    /**
     * List all functions 
     * @description Returns all functions you've previously added to the specified project.
     */
    get: operations["v1-list-all-functions"];
    /**
     * Bulk update functions 
     * @description Bulk update functions. It will create a new function or replace existing. The operation is idempotent. NOTE: You will need to manually bump the version.
     */
    put: operations["v1-bulk-update-functions"];
    /**
     * Create a function 
     * @deprecated 
     * @description This endpoint is deprecated - use the deploy endpoint. Creates a function and adds it to the specified project.
     */
    post: operations["v1-create-a-function"];
  };
  "/v1/projects/{ref}/functions/deploy": {
    /**
     * Deploy a function 
     * @description A new endpoint to deploy functions. It will create if function does not exist.
     */
    post: operations["v1-deploy-a-function"];
  };
  "/v1/projects/{ref}/functions/{function_slug}": {
    /**
     * Retrieve a function 
     * @description Retrieves a function with the specified slug and project.
     */
    get: operations["v1-get-a-function"];
    /**
     * Delete a function 
     * @description Deletes a function with the specified slug from the specified project.
     */
    delete: operations["v1-delete-a-function"];
    /**
     * Update a function 
     * @description Updates a function with the specified slug and project.
     */
    patch: operations["v1-update-a-function"];
  };
  "/v1/projects/{ref}/functions/{function_slug}/body": {
    /**
     * Retrieve a function body 
     * @description Retrieves a function body for the specified slug and project.
     */
    get: operations["v1-get-a-function-body"];
  };
  "/v1/projects/{ref}/storage/buckets": {
    /** Lists all buckets */
    get: operations["v1-list-all-buckets"];
  };
  "/v1/projects/{ref}/config/auth/sso/providers": {
    /** Lists all SSO providers */
    get: operations["v1-list-all-sso-provider"];
    /** Creates a new SSO provider */
    post: operations["v1-create-a-sso-provider"];
  };
  "/v1/projects/{ref}/config/auth/sso/providers/{provider_id}": {
    /** Gets a SSO provider by its UUID */
    get: operations["v1-get-a-sso-provider"];
    /** Updates a SSO provider by its UUID */
    put: operations["v1-update-a-sso-provider"];
    /** Removes a SSO provider by its UUID */
    delete: operations["v1-delete-a-sso-provider"];
  };
  "/v1/projects/{ref}/database/backups": {
    /** Lists all backups */
    get: operations["v1-list-all-backups"];
  };
  "/v1/projects/{ref}/database/backups/restore-pitr": {
    /** Restores a PITR backup for a database */
    post: operations["v1-restore-pitr-backup"];
  };
  "/v1/organizations/{slug}/members": {
    /** List members of an organization */
    get: operations["v1-list-organization-members"];
  };
  "/v1/organizations/{slug}": {
    /** Gets information about the organization */
    get: operations["v1-get-an-organization"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    BranchDetailResponse: {
      ref: string;
      postgres_version: string;
      postgres_engine: string;
      release_channel: string;
      /** @enum {string} */
      status: "INACTIVE" | "ACTIVE_HEALTHY" | "ACTIVE_UNHEALTHY" | "COMING_UP" | "UNKNOWN" | "GOING_DOWN" | "INIT_FAILED" | "REMOVED" | "RESTORING" | "UPGRADING" | "PAUSING" | "RESTORE_FAILED" | "RESTARTING" | "PAUSE_FAILED" | "RESIZING";
      db_host: string;
      db_port: number;
      db_user?: string;
      db_pass?: string;
      jwt_secret?: string;
    };
    UpdateBranchBody: {
      branch_name?: string;
      git_branch?: string;
      /**
       * @deprecated 
       * @description This field is deprecated and will be ignored. Use v1-reset-a-branch endpoint directly instead.
       */
      reset_on_push?: boolean;
      persistent?: boolean;
      /** @enum {string} */
      status?: "CREATING_PROJECT" | "RUNNING_MIGRATIONS" | "MIGRATIONS_PASSED" | "MIGRATIONS_FAILED" | "FUNCTIONS_DEPLOYED" | "FUNCTIONS_FAILED";
    };
    BranchResponse: {
      id: string;
      name: string;
      project_ref: string;
      parent_project_ref: string;
      is_default: boolean;
      git_branch?: string;
      /** Format: int32 */
      pr_number?: number;
      /**
       * @deprecated 
       * @description This field is deprecated and will not be populated.
       */
      latest_check_run_id?: number;
      persistent: boolean;
      /** @enum {string} */
      status: "CREATING_PROJECT" | "RUNNING_MIGRATIONS" | "MIGRATIONS_PASSED" | "MIGRATIONS_FAILED" | "FUNCTIONS_DEPLOYED" | "FUNCTIONS_FAILED";
      created_at: string;
      updated_at: string;
    };
    BranchDeleteResponse: {
      /** @enum {string} */
      message: "ok";
    };
    BranchActionBody: {
      migration_version?: string;
    };
    BranchUpdateResponse: {
      workflow_run_id: string;
      /** @enum {string} */
      message: "ok";
    };
    V1DatabaseResponse: {
      /** @description Database host */
      host: string;
      /** @description Database version */
      version: string;
      /** @description Database engine */
      postgres_engine: string;
      /** @description Release channel */
      release_channel: string;
    };
    V1ProjectWithDatabaseResponse: {
      /** @description Id of your project */
      id: string;
      /** @description Slug of your organization */
      organization_id: string;
      /** @description Name of your project */
      name: string;
      /**
       * @description Region of your project 
       * @example us-east-1
       */
      region: string;
      /**
       * @description Creation timestamp 
       * @example 2023-03-29T16:32:59Z
       */
      created_at: string;
      /** @enum {string} */
      status: "INACTIVE" | "ACTIVE_HEALTHY" | "ACTIVE_UNHEALTHY" | "COMING_UP" | "UNKNOWN" | "GOING_DOWN" | "INIT_FAILED" | "REMOVED" | "RESTORING" | "UPGRADING" | "PAUSING" | "RESTORE_FAILED" | "RESTARTING" | "PAUSE_FAILED" | "RESIZING";
      database: components["schemas"]["V1DatabaseResponse"];
    };
    V1CreateProjectBodyDto: {
      /** @description Database password */
      db_pass: string;
      /** @description Name of your project */
      name: string;
      /** @description Slug of your organization */
      organization_id: string;
      /**
       * @deprecated 
       * @description Subscription Plan is now set on organization level and is ignored in this request 
       * @enum {string}
       */
      plan?: "free" | "pro";
      /**
       * @description Region you want your server to reside in 
       * @enum {string}
       */
      region: "us-east-1" | "us-east-2" | "us-west-1" | "us-west-2" | "ap-east-1" | "ap-southeast-1" | "ap-northeast-1" | "ap-northeast-2" | "ap-southeast-2" | "eu-west-1" | "eu-west-2" | "eu-west-3" | "eu-north-1" | "eu-central-1" | "eu-central-2" | "ca-central-1" | "ap-south-1" | "sa-east-1";
      /**
       * @deprecated 
       * @description This field is deprecated and is ignored in this request
       */
      kps_enabled?: boolean;
      /** @enum {string} */
      desired_instance_size?: "micro" | "small" | "medium" | "large" | "xlarge" | "2xlarge" | "4xlarge" | "8xlarge" | "12xlarge" | "16xlarge";
      /**
       * Format: uri 
       * @description Template URL used to create the project from the CLI. 
       * @example https://github.com/supabase/supabase/tree/master/examples/slack-clone/nextjs-slack-clone
       */
      template_url?: string;
    };
    V1ProjectResponse: {
      /** @description Id of your project */
      id: string;
      /** @description Slug of your organization */
      organization_id: string;
      /** @description Name of your project */
      name: string;
      /**
       * @description Region of your project 
       * @example us-east-1
       */
      region: string;
      /**
       * @description Creation timestamp 
       * @example 2023-03-29T16:32:59Z
       */
      created_at: string;
      /** @enum {string} */
      status: "INACTIVE" | "ACTIVE_HEALTHY" | "ACTIVE_UNHEALTHY" | "COMING_UP" | "UNKNOWN" | "GOING_DOWN" | "INIT_FAILED" | "REMOVED" | "RESTORING" | "UPGRADING" | "PAUSING" | "RESTORE_FAILED" | "RESTARTING" | "PAUSE_FAILED" | "RESIZING";
    };
    OrganizationResponseV1: {
      id: string;
      name: string;
    };
    CreateOrganizationV1Dto: {
      name: string;
    };
    OAuthTokenBody: {
      /** @enum {string} */
      grant_type?: "authorization_code" | "refresh_token";
      /** Format: uuid */
      client_id?: string;
      client_secret?: string;
      code?: string;
      code_verifier?: string;
      redirect_uri?: string;
      refresh_token?: string;
    };
    OAuthTokenResponse: {
      access_token: string;
      refresh_token: string;
      expires_in: number;
      /** @enum {string} */
      token_type: "Bearer";
    };
    OAuthRevokeTokenBodyDto: {
      /** Format: uuid */
      client_id: string;
      client_secret: string;
      refresh_token: string;
    };
    SnippetProject: {
      /** Format: int64 */
      id: number;
      name: string;
    };
    SnippetUser: {
      /** Format: int64 */
      id: number;
      username: string;
    };
    SnippetMeta: {
      id: string;
      inserted_at: string;
      updated_at: string;
      /** @enum {string} */
      type: "sql";
      /** @enum {string} */
      visibility: "user" | "project" | "org" | "public";
      name: string;
      description: string | null;
      project: components["schemas"]["SnippetProject"];
      owner: components["schemas"]["SnippetUser"];
      updated_by: components["schemas"]["SnippetUser"];
    };
    SnippetList: {
      data: (components["schemas"]["SnippetMeta"])[];
      cursor?: string;
    };
    SnippetContent: {
      favorite: boolean;
      schema_version: string;
      sql: string;
    };
    SnippetResponse: {
      id: string;
      inserted_at: string;
      updated_at: string;
      /** @enum {string} */
      type: "sql";
      /** @enum {string} */
      visibility: "user" | "project" | "org" | "public";
      name: string;
      description: string | null;
      project: components["schemas"]["SnippetProject"];
      owner: components["schemas"]["SnippetUser"];
      updated_by: components["schemas"]["SnippetUser"];
      content: components["schemas"]["SnippetContent"];
    };
    ApiKeyResponse: {
      name: string;
      api_key: string;
      id?: string | null;
      /** @enum {string|null} */
      type?: "publishable" | "secret" | "legacy" | null;
      prefix?: string | null;
      description?: string | null;
      hash?: string | null;
      secret_jwt_template?: {
        role: string;
      } | null;
      /** Format: date-time */
      inserted_at?: string | null;
      /** Format: date-time */
      updated_at?: string | null;
    };
    CreateApiKeyBody: {
      /** @enum {string} */
      type: "publishable" | "secret";
      description?: string | null;
      secret_jwt_template?: {
        role: string;
      } | null;
    };
    UpdateApiKeyBody: {
      description?: string | null;
      secret_jwt_template?: {
        role: string;
      } | null;
    };
    CreateBranchBody: {
      branch_name: string;
      git_branch?: string;
      persistent?: boolean;
      region?: string;
      /** @enum {string} */
      desired_instance_size?: "pico" | "nano" | "micro" | "small" | "medium" | "large" | "xlarge" | "2xlarge" | "4xlarge" | "8xlarge" | "12xlarge" | "16xlarge";
      /**
       * @description Release channel. If not provided, GA will be used. 
       * @enum {string}
       */
      release_channel?: "internal" | "alpha" | "beta" | "ga" | "withdrawn" | "preview";
      /**
       * @description Postgres engine version. If not provided, the latest version will be used. 
       * @enum {string}
       */
      postgres_engine?: "15" | "17-oriole";
      secrets?: {
        [key: string]: string | undefined;
      };
    };
    UpdateCustomHostnameResponse: {
      /** @enum {string} */
      status: "1_not_started" | "2_initiated" | "3_challenge_verified" | "4_origin_setup_completed" | "5_services_reconfigured";
      custom_hostname: string;
      data: {
        success: boolean;
        errors: (unknown)[];
        messages: (unknown)[];
        result: {
          id: string;
          hostname: string;
          ssl: {
            status: string;
            validation_records: ({
                txt_name: string;
                txt_value: string;
              })[];
            validation_errors?: ({
                message: string;
              })[];
          };
          ownership_verification: {
            type: string;
            name: string;
            value: string;
          };
          custom_origin_server: string;
          verification_errors?: (string)[];
          status: string;
        };
      };
    };
    UpdateCustomHostnameBody: {
      custom_hostname: string;
    };
    NetworkBanResponse: {
      banned_ipv4_addresses: (string)[];
    };
    RemoveNetworkBanRequest: {
      ipv4_addresses: (string)[];
    };
    NetworkRestrictionsResponse: {
      /** @enum {string} */
      entitlement: "disallowed" | "allowed";
      /** @description At any given point in time, this is the config that the user has requested be applied to their project. The `status` field indicates if it has been applied to the project, or is pending. When an updated config is received, the applied config is moved to `old_config`. */
      config: {
        dbAllowedCidrs?: (string)[];
        dbAllowedCidrsV6?: (string)[];
      };
      /** @description Populated when a new config has been received, but not registered as successfully applied to a project. */
      old_config?: {
        dbAllowedCidrs?: (string)[];
        dbAllowedCidrsV6?: (string)[];
      };
      /** @enum {string} */
      status: "stored" | "applied";
    };
    NetworkRestrictionsRequest: {
      dbAllowedCidrs?: (string)[];
      dbAllowedCidrsV6?: (string)[];
    };
    PgsodiumConfigResponse: {
      root_key: string;
    };
    UpdatePgsodiumConfigBody: {
      root_key: string;
    };
    PostgrestConfigWithJWTSecretResponse: {
      db_schema: string;
      max_rows: number;
      db_extra_search_path: string;
      /** @description If `null`, the value is automatically configured based on compute size. */
      db_pool: number | null;
      jwt_secret?: string;
    };
    V1UpdatePostgrestConfigBody: {
      db_extra_search_path?: string;
      db_schema?: string;
      max_rows?: number;
      db_pool?: number;
    };
    V1PostgrestConfigResponse: {
      db_schema: string;
      max_rows: number;
      db_extra_search_path: string;
      /** @description If `null`, the value is automatically configured based on compute size. */
      db_pool: number | null;
    };
    V1ProjectRefResponse: {
      /** Format: int64 */
      id: number;
      ref: string;
      name: string;
    };
    SecretResponse: {
      name: string;
      value: string;
      updated_at?: string;
    };
    CreateSecretBody: ({
        /**
         * @description Secret name must not start with the SUPABASE_ prefix. 
         * @example string
         */
        name: string;
        value: string;
      })[];
    SslEnforcementResponse: {
      currentConfig: {
        database: boolean;
      };
      appliedSuccessfully: boolean;
    };
    SslEnforcementRequest: {
      requestedConfig: {
        database: boolean;
      };
    };
    TypescriptResponse: {
      types: string;
    };
    VanitySubdomainConfigResponse: {
      /** @enum {string} */
      status: "not-used" | "custom-domain-used" | "active";
      custom_domain?: string;
    };
    VanitySubdomainBody: {
      vanity_subdomain: string;
    };
    SubdomainAvailabilityResponse: {
      available: boolean;
    };
    ActivateVanitySubdomainResponse: {
      custom_domain: string;
    };
    UpgradeDatabaseBody: {
      target_version: string;
      /** @enum {string} */
      release_channel?: "internal" | "alpha" | "beta" | "ga" | "withdrawn" | "preview";
    };
    ProjectUpgradeInitiateResponse: {
      tracking_id: string;
    };
    ProjectUpgradeEligibilityResponse: {
      eligible: boolean;
      current_app_version: string;
      /** @enum {string} */
      current_app_version_release_channel: "internal" | "alpha" | "beta" | "ga" | "withdrawn" | "preview";
      latest_app_version: string;
      target_upgrade_versions: ({
          /** @enum {string} */
          postgres_version: "15" | "17-oriole";
          /** @enum {string} */
          release_channel: "internal" | "alpha" | "beta" | "ga" | "withdrawn" | "preview";
          app_version: string;
        })[];
      potential_breaking_changes: (string)[];
      duration_estimate_hours: number;
      legacy_auth_custom_roles: (string)[];
      extension_dependent_objects: (string)[];
    };
    DatabaseUpgradeStatusResponse: {
      databaseUpgradeStatus: ({
        initiated_at: string;
        latest_status_at: string;
        target_version: number;
        /** @enum {string} */
        error?: "1_upgraded_instance_launch_failed" | "2_volume_detachchment_from_upgraded_instance_failed" | "3_volume_attachment_to_original_instance_failed" | "4_data_upgrade_initiation_failed" | "5_data_upgrade_completion_failed" | "6_volume_detachchment_from_original_instance_failed" | "7_volume_attachment_to_upgraded_instance_failed" | "8_upgrade_completion_failed" | "9_post_physical_backup_failed";
        /** @enum {string} */
        progress?: "0_requested" | "1_started" | "2_launched_upgraded_instance" | "3_detached_volume_from_upgraded_instance" | "4_attached_volume_to_original_instance" | "5_initiated_data_upgrade" | "6_completed_data_upgrade" | "7_detached_volume_from_original_instance" | "8_attached_volume_to_upgraded_instance" | "9_completed_upgrade" | "10_completed_post_physical_backup";
        status: number;
      }) | null;
    };
    ReadOnlyStatusResponse: {
      enabled: boolean;
      override_enabled: boolean;
      override_active_until: string;
    };
    SetUpReadReplicaBody: {
      /**
       * @description Region you want your read replica to reside in 
       * @example us-east-1 
       * @enum {string}
       */
      read_replica_region: "us-east-1" | "us-east-2" | "us-west-1" | "us-west-2" | "ap-east-1" | "ap-southeast-1" | "ap-northeast-1" | "ap-northeast-2" | "ap-southeast-2" | "eu-west-1" | "eu-west-2" | "eu-west-3" | "eu-north-1" | "eu-central-1" | "eu-central-2" | "ca-central-1" | "ap-south-1" | "sa-east-1";
    };
    RemoveReadReplicaBody: {
      database_identifier: string;
    };
    V1ServiceHealthResponse: {
      /** @enum {string} */
      name: "auth" | "db" | "pooler" | "realtime" | "rest" | "storage";
      healthy: boolean;
      /** @enum {string} */
      status: "COMING_UP" | "ACTIVE_HEALTHY" | "UNHEALTHY";
      info?: OneOf<[{
        /** @enum {string} */
        name: "GoTrue";
        version: string;
        description: string;
      }, {
        healthy: boolean;
        db_connected: boolean;
        connected_cluster: number;
      }]>;
      error?: string;
    };
    CreateSigningKeyBody: {
      /** @enum {string} */
      algorithm: "EdDSA" | "ES256" | "RS256" | "HS256";
      /** @enum {string} */
      status?: "in_use" | "standby";
    };
    SigningKeysResponse: {
      keys: ({
          /** Format: uuid */
          id: string;
          /** @enum {string} */
          algorithm: "EdDSA" | "ES256" | "RS256" | "HS256";
          /** @enum {string} */
          status: "in_use" | "previously_used" | "revoked" | "standby";
          public_jwk?: Record<string, unknown> | null;
          /** Format: date-time */
          created_at: string;
          /** Format: date-time */
          updated_at: string;
        })[];
    };
    SigningKeyResponse: {
      /** Format: uuid */
      id: string;
      /** @enum {string} */
      algorithm: "EdDSA" | "ES256" | "RS256" | "HS256";
      /** @enum {string} */
      status: "in_use" | "previously_used" | "revoked" | "standby";
      public_jwk?: Record<string, unknown> | null;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    UpdateSigningKeyBody: {
      /** @enum {string} */
      status: "in_use" | "previously_used" | "revoked" | "standby";
    };
    StorageConfigResponse: {
      fileSizeLimit: number;
      features: {
        imageTransformation: {
          enabled: boolean;
        };
        s3Protocol: {
          enabled: boolean;
        };
      };
    };
    UpdateStorageConfigBody: {
      fileSizeLimit?: number;
      features?: {
        imageTransformation: {
          enabled: boolean;
        };
        s3Protocol: {
          enabled: boolean;
        };
      };
    };
    PostgresConfigResponse: {
      effective_cache_size?: string;
      logical_decoding_work_mem?: string;
      maintenance_work_mem?: string;
      track_activity_query_size?: string;
      max_connections?: number;
      max_locks_per_transaction?: number;
      max_parallel_maintenance_workers?: number;
      max_parallel_workers?: number;
      max_parallel_workers_per_gather?: number;
      max_replication_slots?: number;
      max_slot_wal_keep_size?: string;
      max_standby_archive_delay?: string;
      max_standby_streaming_delay?: string;
      max_wal_size?: string;
      max_wal_senders?: number;
      max_worker_processes?: number;
      /** @enum {string} */
      session_replication_role?: "origin" | "replica" | "local";
      shared_buffers?: string;
      statement_timeout?: string;
      track_commit_timestamp?: boolean;
      wal_keep_size?: string;
      wal_sender_timeout?: string;
      work_mem?: string;
    };
    UpdatePostgresConfigBody: {
      effective_cache_size?: string;
      logical_decoding_work_mem?: string;
      maintenance_work_mem?: string;
      track_activity_query_size?: string;
      max_connections?: number;
      max_locks_per_transaction?: number;
      max_parallel_maintenance_workers?: number;
      max_parallel_workers?: number;
      max_parallel_workers_per_gather?: number;
      max_replication_slots?: number;
      max_slot_wal_keep_size?: string;
      max_standby_archive_delay?: string;
      max_standby_streaming_delay?: string;
      max_wal_size?: string;
      max_wal_senders?: number;
      max_worker_processes?: number;
      /** @enum {string} */
      session_replication_role?: "origin" | "replica" | "local";
      shared_buffers?: string;
      statement_timeout?: string;
      track_commit_timestamp?: boolean;
      wal_keep_size?: string;
      wal_sender_timeout?: string;
      work_mem?: string;
      restart_database?: boolean;
    };
    V1PgbouncerConfigResponse: {
      /** @enum {string} */
      pool_mode?: "transaction" | "session" | "statement";
      default_pool_size?: number;
      ignore_startup_parameters?: string;
      max_client_conn?: number;
      connection_string?: string;
    };
    SupavisorConfigResponse: {
      identifier: string;
      /** @enum {string} */
      database_type: "PRIMARY" | "READ_REPLICA";
      is_using_scram_auth: boolean;
      db_user: string;
      db_host: string;
      db_port: number;
      db_name: string;
      connection_string: string;
      /** @description Use connection_string instead */
      connectionString: string;
      default_pool_size: number | null;
      max_client_conn: number | null;
      /** @enum {string} */
      pool_mode: "transaction" | "session";
    };
    UpdateSupavisorConfigBody: {
      default_pool_size?: number | null;
      /**
       * @description Dedicated pooler mode for the project 
       * @enum {string}
       */
      pool_mode?: "transaction" | "session";
    };
    UpdateSupavisorConfigResponse: {
      default_pool_size: number | null;
      pool_mode: string;
    };
    AuthConfigResponse: {
      api_max_request_duration: number | null;
      db_max_pool_size: number | null;
      disable_signup: boolean | null;
      external_anonymous_users_enabled: boolean | null;
      external_apple_additional_client_ids: string | null;
      external_apple_client_id: string | null;
      external_apple_enabled: boolean | null;
      external_apple_secret: string | null;
      external_azure_client_id: string | null;
      external_azure_enabled: boolean | null;
      external_azure_secret: string | null;
      external_azure_url: string | null;
      external_bitbucket_client_id: string | null;
      external_bitbucket_enabled: boolean | null;
      external_bitbucket_secret: string | null;
      external_discord_client_id: string | null;
      external_discord_enabled: boolean | null;
      external_discord_secret: string | null;
      external_email_enabled: boolean | null;
      external_facebook_client_id: string | null;
      external_facebook_enabled: boolean | null;
      external_facebook_secret: string | null;
      external_figma_client_id: string | null;
      external_figma_enabled: boolean | null;
      external_figma_secret: string | null;
      external_github_client_id: string | null;
      external_github_enabled: boolean | null;
      external_github_secret: string | null;
      external_gitlab_client_id: string | null;
      external_gitlab_enabled: boolean | null;
      external_gitlab_secret: string | null;
      external_gitlab_url: string | null;
      external_google_additional_client_ids: string | null;
      external_google_client_id: string | null;
      external_google_enabled: boolean | null;
      external_google_secret: string | null;
      external_google_skip_nonce_check: boolean | null;
      external_kakao_client_id: string | null;
      external_kakao_enabled: boolean | null;
      external_kakao_secret: string | null;
      external_keycloak_client_id: string | null;
      external_keycloak_enabled: boolean | null;
      external_keycloak_secret: string | null;
      external_keycloak_url: string | null;
      external_linkedin_oidc_client_id: string | null;
      external_linkedin_oidc_enabled: boolean | null;
      external_linkedin_oidc_secret: string | null;
      external_slack_oidc_client_id: string | null;
      external_slack_oidc_enabled: boolean | null;
      external_slack_oidc_secret: string | null;
      external_notion_client_id: string | null;
      external_notion_enabled: boolean | null;
      external_notion_secret: string | null;
      external_phone_enabled: boolean | null;
      external_slack_client_id: string | null;
      external_slack_enabled: boolean | null;
      external_slack_secret: string | null;
      external_spotify_client_id: string | null;
      external_spotify_enabled: boolean | null;
      external_spotify_secret: string | null;
      external_twitch_client_id: string | null;
      external_twitch_enabled: boolean | null;
      external_twitch_secret: string | null;
      external_twitter_client_id: string | null;
      external_twitter_enabled: boolean | null;
      external_twitter_secret: string | null;
      external_workos_client_id: string | null;
      external_workos_enabled: boolean | null;
      external_workos_secret: string | null;
      external_workos_url: string | null;
      external_web3_solana_enabled: boolean | null;
      external_zoom_client_id: string | null;
      external_zoom_enabled: boolean | null;
      external_zoom_secret: string | null;
      hook_custom_access_token_enabled: boolean | null;
      hook_custom_access_token_uri: string | null;
      hook_custom_access_token_secrets: string | null;
      hook_mfa_verification_attempt_enabled: boolean | null;
      hook_mfa_verification_attempt_uri: string | null;
      hook_mfa_verification_attempt_secrets: string | null;
      hook_password_verification_attempt_enabled: boolean | null;
      hook_password_verification_attempt_uri: string | null;
      hook_password_verification_attempt_secrets: string | null;
      hook_send_sms_enabled: boolean | null;
      hook_send_sms_uri: string | null;
      hook_send_sms_secrets: string | null;
      hook_send_email_enabled: boolean | null;
      hook_send_email_uri: string | null;
      hook_send_email_secrets: string | null;
      jwt_exp: number | null;
      mailer_allow_unverified_email_sign_ins: boolean | null;
      mailer_autoconfirm: boolean | null;
      mailer_otp_exp: number;
      mailer_otp_length: number | null;
      mailer_secure_email_change_enabled: boolean | null;
      mailer_subjects_confirmation: string | null;
      mailer_subjects_email_change: string | null;
      mailer_subjects_invite: string | null;
      mailer_subjects_magic_link: string | null;
      mailer_subjects_reauthentication: string | null;
      mailer_subjects_recovery: string | null;
      mailer_templates_confirmation_content: string | null;
      mailer_templates_email_change_content: string | null;
      mailer_templates_invite_content: string | null;
      mailer_templates_magic_link_content: string | null;
      mailer_templates_reauthentication_content: string | null;
      mailer_templates_recovery_content: string | null;
      mfa_max_enrolled_factors: number | null;
      mfa_totp_enroll_enabled: boolean | null;
      mfa_totp_verify_enabled: boolean | null;
      mfa_phone_enroll_enabled: boolean | null;
      mfa_phone_verify_enabled: boolean | null;
      mfa_web_authn_enroll_enabled: boolean | null;
      mfa_web_authn_verify_enabled: boolean | null;
      mfa_phone_otp_length: number;
      mfa_phone_template: string | null;
      mfa_phone_max_frequency: number | null;
      password_hibp_enabled: boolean | null;
      password_min_length: number | null;
      password_required_characters: string | null;
      rate_limit_anonymous_users: number | null;
      rate_limit_email_sent: number | null;
      rate_limit_sms_sent: number | null;
      rate_limit_token_refresh: number | null;
      rate_limit_verify: number | null;
      rate_limit_otp: number | null;
      rate_limit_web3: number | null;
      refresh_token_rotation_enabled: boolean | null;
      saml_enabled: boolean | null;
      saml_external_url: string | null;
      saml_allow_encrypted_assertions: boolean | null;
      security_captcha_enabled: boolean | null;
      security_captcha_provider: string | null;
      security_captcha_secret: string | null;
      security_manual_linking_enabled: boolean | null;
      security_refresh_token_reuse_interval: number | null;
      security_update_password_require_reauthentication: boolean | null;
      sessions_inactivity_timeout: number | null;
      sessions_single_per_user: boolean | null;
      sessions_tags: string | null;
      sessions_timebox: number | null;
      site_url: string | null;
      sms_autoconfirm: boolean | null;
      sms_max_frequency: number | null;
      sms_messagebird_access_key: string | null;
      sms_messagebird_originator: string | null;
      sms_otp_exp: number | null;
      sms_otp_length: number;
      sms_provider: string | null;
      sms_template: string | null;
      sms_test_otp: string | null;
      sms_test_otp_valid_until: string | null;
      sms_textlocal_api_key: string | null;
      sms_textlocal_sender: string | null;
      sms_twilio_account_sid: string | null;
      sms_twilio_auth_token: string | null;
      sms_twilio_content_sid: string | null;
      sms_twilio_message_service_sid: string | null;
      sms_twilio_verify_account_sid: string | null;
      sms_twilio_verify_auth_token: string | null;
      sms_twilio_verify_message_service_sid: string | null;
      sms_vonage_api_key: string | null;
      sms_vonage_api_secret: string | null;
      sms_vonage_from: string | null;
      smtp_admin_email: string | null;
      smtp_host: string | null;
      smtp_max_frequency: number | null;
      smtp_pass: string | null;
      smtp_port: string | null;
      smtp_sender_name: string | null;
      smtp_user: string | null;
      uri_allow_list: string | null;
    };
    UpdateAuthConfigBody: {
      site_url?: string | null;
      disable_signup?: boolean | null;
      jwt_exp?: number | null;
      smtp_admin_email?: string | null;
      smtp_host?: string | null;
      smtp_port?: string | null;
      smtp_user?: string | null;
      smtp_pass?: string | null;
      smtp_max_frequency?: number | null;
      smtp_sender_name?: string | null;
      mailer_allow_unverified_email_sign_ins?: boolean | null;
      mailer_autoconfirm?: boolean | null;
      mailer_subjects_invite?: string | null;
      mailer_subjects_confirmation?: string | null;
      mailer_subjects_recovery?: string | null;
      mailer_subjects_email_change?: string | null;
      mailer_subjects_magic_link?: string | null;
      mailer_subjects_reauthentication?: string | null;
      mailer_templates_invite_content?: string | null;
      mailer_templates_confirmation_content?: string | null;
      mailer_templates_recovery_content?: string | null;
      mailer_templates_email_change_content?: string | null;
      mailer_templates_magic_link_content?: string | null;
      mailer_templates_reauthentication_content?: string | null;
      mfa_max_enrolled_factors?: number | null;
      uri_allow_list?: string | null;
      external_anonymous_users_enabled?: boolean | null;
      external_email_enabled?: boolean | null;
      external_phone_enabled?: boolean | null;
      saml_enabled?: boolean | null;
      saml_external_url?: string | null;
      security_captcha_enabled?: boolean | null;
      /** @enum {string|null} */
      security_captcha_provider?: "turnstile" | "hcaptcha" | null;
      security_captcha_secret?: string | null;
      sessions_timebox?: number | null;
      sessions_inactivity_timeout?: number | null;
      sessions_single_per_user?: boolean | null;
      sessions_tags?: string | null;
      rate_limit_anonymous_users?: number | null;
      rate_limit_email_sent?: number | null;
      rate_limit_sms_sent?: number | null;
      rate_limit_verify?: number | null;
      rate_limit_token_refresh?: number | null;
      rate_limit_otp?: number | null;
      rate_limit_web3?: number | null;
      mailer_secure_email_change_enabled?: boolean | null;
      refresh_token_rotation_enabled?: boolean | null;
      password_hibp_enabled?: boolean | null;
      password_min_length?: number | null;
      /** @enum {string|null} */
      password_required_characters?: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789" | "abcdefghijklmnopqrstuvwxyz:ABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789" | ("abcdefghijklmnopqrstuvwxyz:ABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789:!@#$%^&*()_+-=[]{};'\\:\"|<>?,./`~") | "" | null;
      security_manual_linking_enabled?: boolean | null;
      security_update_password_require_reauthentication?: boolean | null;
      security_refresh_token_reuse_interval?: number | null;
      mailer_otp_exp?: number;
      mailer_otp_length?: number | null;
      sms_autoconfirm?: boolean | null;
      sms_max_frequency?: number | null;
      sms_otp_exp?: number | null;
      sms_otp_length?: number;
      /** @enum {string|null} */
      sms_provider?: "messagebird" | "textlocal" | "twilio" | "twilio_verify" | "vonage" | null;
      sms_messagebird_access_key?: string | null;
      sms_messagebird_originator?: string | null;
      sms_test_otp?: string | null;
      /** Format: date-time */
      sms_test_otp_valid_until?: string | null;
      sms_textlocal_api_key?: string | null;
      sms_textlocal_sender?: string | null;
      sms_twilio_account_sid?: string | null;
      sms_twilio_auth_token?: string | null;
      sms_twilio_content_sid?: string | null;
      sms_twilio_message_service_sid?: string | null;
      sms_twilio_verify_account_sid?: string | null;
      sms_twilio_verify_auth_token?: string | null;
      sms_twilio_verify_message_service_sid?: string | null;
      sms_vonage_api_key?: string | null;
      sms_vonage_api_secret?: string | null;
      sms_vonage_from?: string | null;
      sms_template?: string | null;
      hook_mfa_verification_attempt_enabled?: boolean | null;
      hook_mfa_verification_attempt_uri?: string | null;
      hook_mfa_verification_attempt_secrets?: string | null;
      hook_password_verification_attempt_enabled?: boolean | null;
      hook_password_verification_attempt_uri?: string | null;
      hook_password_verification_attempt_secrets?: string | null;
      hook_custom_access_token_enabled?: boolean | null;
      hook_custom_access_token_uri?: string | null;
      hook_custom_access_token_secrets?: string | null;
      hook_send_sms_enabled?: boolean | null;
      hook_send_sms_uri?: string | null;
      hook_send_sms_secrets?: string | null;
      hook_send_email_enabled?: boolean | null;
      hook_send_email_uri?: string | null;
      hook_send_email_secrets?: string | null;
      external_apple_enabled?: boolean | null;
      external_apple_client_id?: string | null;
      external_apple_secret?: string | null;
      external_apple_additional_client_ids?: string | null;
      external_azure_enabled?: boolean | null;
      external_azure_client_id?: string | null;
      external_azure_secret?: string | null;
      external_azure_url?: string | null;
      external_bitbucket_enabled?: boolean | null;
      external_bitbucket_client_id?: string | null;
      external_bitbucket_secret?: string | null;
      external_discord_enabled?: boolean | null;
      external_discord_client_id?: string | null;
      external_discord_secret?: string | null;
      external_facebook_enabled?: boolean | null;
      external_facebook_client_id?: string | null;
      external_facebook_secret?: string | null;
      external_figma_enabled?: boolean | null;
      external_figma_client_id?: string | null;
      external_figma_secret?: string | null;
      external_github_enabled?: boolean | null;
      external_github_client_id?: string | null;
      external_github_secret?: string | null;
      external_gitlab_enabled?: boolean | null;
      external_gitlab_client_id?: string | null;
      external_gitlab_secret?: string | null;
      external_gitlab_url?: string | null;
      external_google_enabled?: boolean | null;
      external_google_client_id?: string | null;
      external_google_secret?: string | null;
      external_google_additional_client_ids?: string | null;
      external_google_skip_nonce_check?: boolean | null;
      external_kakao_enabled?: boolean | null;
      external_kakao_client_id?: string | null;
      external_kakao_secret?: string | null;
      external_keycloak_enabled?: boolean | null;
      external_keycloak_client_id?: string | null;
      external_keycloak_secret?: string | null;
      external_keycloak_url?: string | null;
      external_linkedin_oidc_enabled?: boolean | null;
      external_linkedin_oidc_client_id?: string | null;
      external_linkedin_oidc_secret?: string | null;
      external_slack_oidc_enabled?: boolean | null;
      external_slack_oidc_client_id?: string | null;
      external_slack_oidc_secret?: string | null;
      external_notion_enabled?: boolean | null;
      external_notion_client_id?: string | null;
      external_notion_secret?: string | null;
      external_slack_enabled?: boolean | null;
      external_slack_client_id?: string | null;
      external_slack_secret?: string | null;
      external_spotify_enabled?: boolean | null;
      external_spotify_client_id?: string | null;
      external_spotify_secret?: string | null;
      external_twitch_enabled?: boolean | null;
      external_twitch_client_id?: string | null;
      external_twitch_secret?: string | null;
      external_twitter_enabled?: boolean | null;
      external_twitter_client_id?: string | null;
      external_twitter_secret?: string | null;
      external_workos_enabled?: boolean | null;
      external_workos_client_id?: string | null;
      external_workos_secret?: string | null;
      external_workos_url?: string | null;
      external_web3_solana_enabled?: boolean | null;
      external_zoom_enabled?: boolean | null;
      external_zoom_client_id?: string | null;
      external_zoom_secret?: string | null;
      db_max_pool_size?: number | null;
      api_max_request_duration?: number | null;
      mfa_totp_enroll_enabled?: boolean | null;
      mfa_totp_verify_enabled?: boolean | null;
      mfa_web_authn_enroll_enabled?: boolean | null;
      mfa_web_authn_verify_enabled?: boolean | null;
      mfa_phone_enroll_enabled?: boolean | null;
      mfa_phone_verify_enabled?: boolean | null;
      mfa_phone_max_frequency?: number | null;
      mfa_phone_otp_length?: number | null;
      mfa_phone_template?: string | null;
    };
    CreateThirdPartyAuthBody: {
      oidc_issuer_url?: string;
      jwks_url?: string;
      custom_jwks?: unknown;
    };
    ThirdPartyAuth: {
      /** Format: uuid */
      id: string;
      type: string;
      oidc_issuer_url?: string | null;
      jwks_url?: string | null;
      custom_jwks?: Record<string, unknown> | null;
      resolved_jwks?: Record<string, unknown> | null;
      inserted_at: string;
      updated_at: string;
      resolved_at?: string | null;
    };
    ProjectAvailableRestoreVersion: {
      version: string;
      /** @enum {string} */
      release_channel: "internal" | "alpha" | "beta" | "ga" | "withdrawn" | "preview";
      /** @enum {string} */
      postgres_engine: "13" | "14" | "15" | "17" | "17-oriole";
    };
    GetProjectAvailableRestoreVersionsResponse: {
      available_versions: (components["schemas"]["ProjectAvailableRestoreVersion"])[];
    };
    ListProjectAddonsResponseDto: {
      selected_addons: ({
          /** @enum {string} */
          type: "custom_domain" | "compute_instance" | "pitr" | "ipv4" | "auth_mfa_phone" | "auth_mfa_web_authn" | "log_drain";
          variant: {
            id: ("ci_micro" | "ci_small" | "ci_medium" | "ci_large" | "ci_xlarge" | "ci_2xlarge" | "ci_4xlarge" | "ci_8xlarge" | "ci_12xlarge" | "ci_16xlarge") | "cd_default" | ("pitr_7" | "pitr_14" | "pitr_28") | "ipv4_default" | "auth_mfa_phone_default" | "auth_mfa_web_authn_default" | "log_drain_default";
            name: string;
            price: {
              description: string;
              /** @enum {string} */
              type: "fixed" | "usage";
              /** @enum {string} */
              interval: "monthly" | "hourly";
              amount: number;
            };
            /** @description Any JSON-serializable value */
            meta?: unknown;
          };
        })[];
      available_addons: ({
          /** @enum {string} */
          type: "custom_domain" | "compute_instance" | "pitr" | "ipv4" | "auth_mfa_phone" | "auth_mfa_web_authn" | "log_drain";
          name: string;
          variants: ({
              id: ("ci_micro" | "ci_small" | "ci_medium" | "ci_large" | "ci_xlarge" | "ci_2xlarge" | "ci_4xlarge" | "ci_8xlarge" | "ci_12xlarge" | "ci_16xlarge") | "cd_default" | ("pitr_7" | "pitr_14" | "pitr_28") | "ipv4_default" | "auth_mfa_phone_default" | "auth_mfa_web_authn_default" | "log_drain_default";
              name: string;
              price: {
                description: string;
                /** @enum {string} */
                type: "fixed" | "usage";
                /** @enum {string} */
                interval: "monthly" | "hourly";
                amount: number;
              };
              /** @description Any JSON-serializable value */
              meta?: unknown;
            })[];
        })[];
    };
    ApplyProjectAddonBodyDto: {
      addon_variant: ("ci_micro" | "ci_small" | "ci_medium" | "ci_large" | "ci_xlarge" | "ci_2xlarge" | "ci_4xlarge" | "ci_8xlarge" | "ci_12xlarge" | "ci_16xlarge") | "cd_default" | ("pitr_7" | "pitr_14" | "pitr_28") | "ipv4_default";
      /** @enum {string} */
      addon_type: "custom_domain" | "compute_instance" | "pitr" | "ipv4" | "auth_mfa_phone" | "auth_mfa_web_authn" | "log_drain";
    };
    V1ProjectAdvisorsResponseDto: {
      lints: ({
          /** @enum {string} */
          name: "unindexed_foreign_keys" | "auth_users_exposed" | "auth_rls_initplan" | "no_primary_key" | "unused_index" | "multiple_permissive_policies" | "policy_exists_rls_disabled" | "rls_enabled_no_policy" | "duplicate_index" | "security_definer_view" | "function_search_path_mutable" | "rls_disabled_in_public" | "extension_in_public" | "rls_references_user_metadata" | "materialized_view_in_api" | "foreign_table_in_api" | "unsupported_reg_types" | "auth_otp_long_expiry" | "auth_otp_short_length" | "ssl_not_enforced" | "network_restrictions_not_set" | "password_requirements_min_length" | "pitr_not_enabled" | "auth_leaked_password_protection" | "auth_insufficient_mfa_options" | "auth_password_policy_missing" | "leaked_service_key" | "no_backup_admin";
          title: string;
          /** @enum {string} */
          level: "ERROR" | "WARN" | "INFO";
          /** @enum {string} */
          facing: "EXTERNAL";
          categories: ("PERFORMANCE" | "SECURITY")[];
          description: string;
          detail: string;
          remediation: string;
          metadata?: {
            schema?: string;
            name?: string;
            entity?: string;
            /** @enum {string} */
            type?: "table" | "view" | "auth" | "function" | "extension" | "compliance";
            fkey_name?: string;
            fkey_columns?: (number)[];
          };
          cache_key: string;
        })[];
    };
    V1AnalyticsResponse: {
      result?: (unknown)[];
      error?: OneOf<[string, {
        code: number;
        errors: ({
            domain: string;
            location: string;
            locationType: string;
            message: string;
            reason: string;
          })[];
        message: string;
        status: string;
      }]>;
    };
    V1ListMigrationsResponse: ({
        version: string;
        name?: string;
      })[];
    V1CreateMigrationBody: {
      query: string;
      name?: string;
    };
    V1RunQueryBody: {
      query: string;
      read_only?: boolean;
    };
    GetProjectDbMetadataResponseDto: {
      databases: ({
          name: string;
          schemas: ({
              name: string;
              [key: string]: unknown;
            })[];
          [key: string]: unknown;
        })[];
    };
    FunctionResponse: {
      id: string;
      slug: string;
      name: string;
      /** @enum {string} */
      status: "ACTIVE" | "REMOVED" | "THROTTLED";
      version: number;
      created_at: number;
      updated_at: number;
      verify_jwt?: boolean;
      import_map?: boolean;
      entrypoint_path?: string;
      import_map_path?: string;
    };
    BulkUpdateFunctionBody: ({
        id: string;
        slug: string;
        name: string;
        /** @enum {string} */
        status: "ACTIVE" | "REMOVED" | "THROTTLED";
        version: number;
        created_at?: number;
        verify_jwt?: boolean;
        import_map?: boolean;
        entrypoint_path?: string;
        import_map_path?: string;
      })[];
    BulkUpdateFunctionResponse: {
      functions: ({
          id: string;
          slug: string;
          name: string;
          /** @enum {string} */
          status: "ACTIVE" | "REMOVED" | "THROTTLED";
          version: number;
          created_at: number;
          updated_at: number;
          verify_jwt?: boolean;
          import_map?: boolean;
          entrypoint_path?: string;
          import_map_path?: string;
        })[];
    };
    DeployFunctionResponse: {
      id: string;
      slug: string;
      name: string;
      /** @enum {string} */
      status: "ACTIVE" | "REMOVED" | "THROTTLED";
      version: number;
      created_at?: number;
      updated_at?: number;
      verify_jwt?: boolean;
      import_map?: boolean;
      entrypoint_path?: string;
      import_map_path?: string;
    };
    FunctionSlugResponse: {
      id: string;
      slug: string;
      name: string;
      /** @enum {string} */
      status: "ACTIVE" | "REMOVED" | "THROTTLED";
      version: number;
      created_at: number;
      updated_at: number;
      verify_jwt?: boolean;
      import_map?: boolean;
      entrypoint_path?: string;
      import_map_path?: string;
    };
    V1StorageBucketResponse: {
      id: string;
      name: string;
      owner: string;
      created_at: string;
      updated_at: string;
      public: boolean;
    };
    CreateProviderBody: {
      /**
       * @description What type of provider will be created 
       * @enum {string}
       */
      type: "saml";
      metadata_xml?: string;
      metadata_url?: string;
      domains?: (string)[];
      attribute_mapping?: {
        keys: {
          [key: string]: ({
            name?: string;
            names?: (string)[];
            default?: Record<string, never> | number | string | boolean;
            array?: boolean;
          }) | undefined;
        };
      };
    };
    CreateProviderResponse: {
      id: string;
      saml?: {
        id: string;
        entity_id: string;
        metadata_url?: string;
        metadata_xml?: string;
        attribute_mapping?: {
          keys: {
            [key: string]: ({
              name?: string;
              names?: (string)[];
              default?: Record<string, never> | number | string | boolean;
              array?: boolean;
            }) | undefined;
          };
        };
      };
      domains?: ({
          id: string;
          domain?: string;
          created_at?: string;
          updated_at?: string;
        })[];
      created_at?: string;
      updated_at?: string;
    };
    ListProvidersResponse: {
      items: ({
          id: string;
          saml?: {
            id: string;
            entity_id: string;
            metadata_url?: string;
            metadata_xml?: string;
            attribute_mapping?: {
              keys: {
                [key: string]: ({
                  name?: string;
                  names?: (string)[];
                  default?: Record<string, never> | number | string | boolean;
                  array?: boolean;
                }) | undefined;
              };
            };
          };
          domains?: ({
              id: string;
              domain?: string;
              created_at?: string;
              updated_at?: string;
            })[];
          created_at?: string;
          updated_at?: string;
        })[];
    };
    GetProviderResponse: {
      id: string;
      saml?: {
        id: string;
        entity_id: string;
        metadata_url?: string;
        metadata_xml?: string;
        attribute_mapping?: {
          keys: {
            [key: string]: ({
              name?: string;
              names?: (string)[];
              default?: Record<string, never> | number | string | boolean;
              array?: boolean;
            }) | undefined;
          };
        };
      };
      domains?: ({
          id: string;
          domain?: string;
          created_at?: string;
          updated_at?: string;
        })[];
      created_at?: string;
      updated_at?: string;
    };
    UpdateProviderBody: {
      metadata_xml?: string;
      metadata_url?: string;
      domains?: (string)[];
      attribute_mapping?: {
        keys: {
          [key: string]: ({
            name?: string;
            names?: (string)[];
            default?: Record<string, never> | number | string | boolean;
            array?: boolean;
          }) | undefined;
        };
      };
    };
    UpdateProviderResponse: {
      id: string;
      saml?: {
        id: string;
        entity_id: string;
        metadata_url?: string;
        metadata_xml?: string;
        attribute_mapping?: {
          keys: {
            [key: string]: ({
              name?: string;
              names?: (string)[];
              default?: Record<string, never> | number | string | boolean;
              array?: boolean;
            }) | undefined;
          };
        };
      };
      domains?: ({
          id: string;
          domain?: string;
          created_at?: string;
          updated_at?: string;
        })[];
      created_at?: string;
      updated_at?: string;
    };
    DeleteProviderResponse: {
      id: string;
      saml?: {
        id: string;
        entity_id: string;
        metadata_url?: string;
        metadata_xml?: string;
        attribute_mapping?: {
          keys: {
            [key: string]: ({
              name?: string;
              names?: (string)[];
              default?: Record<string, never> | number | string | boolean;
              array?: boolean;
            }) | undefined;
          };
        };
      };
      domains?: ({
          id: string;
          domain?: string;
          created_at?: string;
          updated_at?: string;
        })[];
      created_at?: string;
      updated_at?: string;
    };
    V1Backup: {
      /** @enum {string} */
      status: "COMPLETED" | "FAILED" | "PENDING" | "REMOVED" | "ARCHIVED" | "CANCELLED";
      is_physical_backup: boolean;
      inserted_at: string;
    };
    V1PhysicalBackup: {
      /** Format: int64 */
      earliest_physical_backup_date_unix?: number;
      /** Format: int64 */
      latest_physical_backup_date_unix?: number;
    };
    V1BackupsResponse: {
      region: string;
      walg_enabled: boolean;
      pitr_enabled: boolean;
      backups: (components["schemas"]["V1Backup"])[];
      physical_backup_data: components["schemas"]["V1PhysicalBackup"];
    };
    V1RestorePitrBody: {
      /** Format: int64 */
      recovery_time_target_unix: number;
    };
    V1OrganizationMemberResponse: {
      user_id: string;
      user_name: string;
      email?: string;
      role_name: string;
      mfa_enabled: boolean;
    };
    /** @enum {string} */
    BillingPlanId: "free" | "pro" | "team" | "enterprise";
    /** @enum {string} */
    ReleaseChannel: "internal" | "alpha" | "beta" | "ga" | "withdrawn" | "preview";
    V1OrganizationSlugResponse: {
      plan?: components["schemas"]["BillingPlanId"];
      opt_in_tags: ("AI_SQL_GENERATOR_OPT_IN")[];
      allowed_release_channels: (components["schemas"]["ReleaseChannel"])[];
      id: string;
      name: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * Get database branch config 
   * @description Fetches configurations of the specified database branch
   */
  "v1-get-a-branch-config": {
    parameters: {
      path: {
        /** @description Branch ID */
        branch_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BranchDetailResponse"];
        };
      };
      /** @description Failed to retrieve database branch */
      500: never;
    };
  };
  /**
   * Delete a database branch 
   * @description Deletes the specified database branch
   */
  "v1-delete-a-branch": {
    parameters: {
      path: {
        /** @description Branch ID */
        branch_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BranchDeleteResponse"];
        };
      };
      /** @description Failed to delete database branch */
      500: never;
    };
  };
  /**
   * Update database branch config 
   * @description Updates the configuration of the specified database branch
   */
  "v1-update-a-branch-config": {
    parameters: {
      path: {
        /** @description Branch ID */
        branch_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateBranchBody"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BranchResponse"];
        };
      };
      /** @description Failed to update database branch */
      500: never;
    };
  };
  /**
   * Pushes a database branch 
   * @description Pushes the specified database branch
   */
  "v1-push-a-branch": {
    parameters: {
      path: {
        /** @description Branch ID */
        branch_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BranchActionBody"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["BranchUpdateResponse"];
        };
      };
      /** @description Failed to push database branch */
      500: never;
    };
  };
  /**
   * Merges a database branch 
   * @description Merges the specified database branch
   */
  "v1-merge-a-branch": {
    parameters: {
      path: {
        /** @description Branch ID */
        branch_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BranchActionBody"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["BranchUpdateResponse"];
        };
      };
      /** @description Failed to merge database branch */
      500: never;
    };
  };
  /**
   * Resets a database branch 
   * @description Resets the specified database branch
   */
  "v1-reset-a-branch": {
    parameters: {
      path: {
        /** @description Branch ID */
        branch_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BranchActionBody"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["BranchUpdateResponse"];
        };
      };
      /** @description Failed to reset database branch */
      500: never;
    };
  };
  /**
   * List all projects 
   * @description Returns a list of all projects you've previously created.
   */
  "v1-list-all-projects": {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["V1ProjectWithDatabaseResponse"])[];
        };
      };
    };
  };
  /** Create a project */
  "v1-create-a-project": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["V1CreateProjectBodyDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["V1ProjectResponse"];
        };
      };
    };
  };
  /**
   * List all organizations 
   * @description Returns a list of organizations that you currently belong to.
   */
  "v1-list-all-organizations": {
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["OrganizationResponseV1"])[];
        };
      };
      /** @description Unexpected error listing organizations */
      500: never;
    };
  };
  /** Create an organization */
  "v1-create-an-organization": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOrganizationV1Dto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["OrganizationResponseV1"];
        };
      };
      /** @description Unexpected error creating an organization */
      500: never;
    };
  };
  /** [Beta] Authorize user through oauth */
  "v1-authorize-user": {
    parameters: {
      query: {
        client_id: string;
        response_type: "code" | "token" | "id_token token";
        redirect_uri: string;
        scope?: string;
        state?: string;
        response_mode?: string;
        code_challenge?: string;
        code_challenge_method?: "plain" | "sha256" | "S256";
      };
    };
    responses: {
      303: never;
    };
  };
  /** [Beta] Exchange auth code for user's access and refresh token */
  "v1-exchange-oauth-token": {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["OAuthTokenBody"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["OAuthTokenResponse"];
        };
      };
    };
  };
  /** [Beta] Revoke oauth app authorization and it's corresponding tokens */
  "v1-revoke-token": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OAuthRevokeTokenBodyDto"];
      };
    };
    responses: {
      204: never;
    };
  };
  /** Lists SQL snippets for the logged in user */
  "v1-list-all-snippets": {
    parameters: {
      query?: {
        /** @description Project ref */
        project_ref?: string;
        cursor?: string;
        limit?: string;
        sort_by?: "name" | "inserted_at";
        sort_order?: "asc" | "desc";
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SnippetList"];
        };
      };
      /** @description Failed to list user's SQL snippets */
      500: never;
    };
  };
  /** Gets a specific SQL snippet */
  "v1-get-a-snippet": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SnippetResponse"];
        };
      };
      /** @description Failed to retrieve SQL snippet */
      500: never;
    };
  };
  /** Get project api keys */
  "v1-get-project-api-keys": {
    parameters: {
      query?: {
        reveal?: string;
      };
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["ApiKeyResponse"])[];
        };
      };
      403: never;
    };
  };
  /** [Alpha] Creates a new API key for the project */
  createApiKey: {
    parameters: {
      query?: {
        reveal?: string;
      };
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateApiKeyBody"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ApiKeyResponse"];
        };
      };
      403: never;
    };
  };
  /** [Alpha] Get API key */
  getApiKey: {
    parameters: {
      query?: {
        reveal?: string;
      };
      path: {
        /** @description Project ref */
        ref: string;
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApiKeyResponse"];
        };
      };
      403: never;
    };
  };
  /** [Alpha] Deletes an API key for the project */
  deleteApiKey: {
    parameters: {
      query?: {
        reveal?: string;
      };
      path: {
        /** @description Project ref */
        ref: string;
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApiKeyResponse"];
        };
      };
      403: never;
    };
  };
  /** [Alpha] Updates an API key for the project */
  updateApiKey: {
    parameters: {
      query?: {
        reveal?: string;
      };
      path: {
        /** @description Project ref */
        ref: string;
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateApiKeyBody"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApiKeyResponse"];
        };
      };
      403: never;
    };
  };
  /**
   * List all database branches 
   * @description Returns all database branches of the specified project.
   */
  "v1-list-all-branches": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["BranchResponse"])[];
        };
      };
      403: never;
      /** @description Failed to retrieve database branches */
      500: never;
    };
  };
  /**
   * Create a database branch 
   * @description Creates a database branch from the specified project.
   */
  "v1-create-a-branch": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateBranchBody"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["BranchResponse"];
        };
      };
      403: never;
      /** @description Failed to create database branch */
      500: never;
    };
  };
  /**
   * Disables preview branching 
   * @description Disables preview branching for the specified project
   */
  "v1-disable-preview-branching": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: never;
      403: never;
      /** @description Failed to disable preview branching */
      500: never;
    };
  };
  /** [Beta] Gets project's custom hostname config */
  "v1-get-hostname-config": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UpdateCustomHostnameResponse"];
        };
      };
      403: never;
      /** @description Failed to retrieve project's custom hostname config */
      500: never;
    };
  };
  /** [Beta] Deletes a project's custom hostname configuration */
  "v1-Delete hostname config": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: never;
      403: never;
      /** @description Failed to delete project custom hostname configuration */
      500: never;
    };
  };
  /** [Beta] Updates project's custom hostname configuration */
  "v1-update-hostname-config": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateCustomHostnameBody"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["UpdateCustomHostnameResponse"];
        };
      };
      403: never;
      /** @description Failed to update project custom hostname configuration */
      500: never;
    };
  };
  /** [Beta] Attempts to verify the DNS configuration for project's custom hostname configuration */
  "v1-verify-dns-config": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["UpdateCustomHostnameResponse"];
        };
      };
      403: never;
      /** @description Failed to verify project custom hostname configuration */
      500: never;
    };
  };
  /** [Beta] Activates a custom hostname for a project. */
  "v1-activate-custom-hostname": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["UpdateCustomHostnameResponse"];
        };
      };
      403: never;
      /** @description Failed to activate project custom hostname configuration */
      500: never;
    };
  };
  /** [Beta] Gets project's network bans */
  "v1-list-all-network-bans": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["NetworkBanResponse"];
        };
      };
      403: never;
      /** @description Failed to retrieve project's network bans */
      500: never;
    };
  };
  /** [Beta] Remove network bans. */
  "v1-delete-network-bans": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RemoveNetworkBanRequest"];
      };
    };
    responses: {
      200: never;
      403: never;
      /** @description Failed to remove network bans. */
      500: never;
    };
  };
  /** [Beta] Gets project's network restrictions */
  "v1-get-network-restrictions": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["NetworkRestrictionsResponse"];
        };
      };
      403: never;
      /** @description Failed to retrieve project's network restrictions */
      500: never;
    };
  };
  /** [Beta] Updates project's network restrictions */
  "v1-update-network-restrictions": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NetworkRestrictionsRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["NetworkRestrictionsResponse"];
        };
      };
      403: never;
      /** @description Failed to update project network restrictions */
      500: never;
    };
  };
  /** [Beta] Gets project's pgsodium config */
  "v1-get-pgsodium-config": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PgsodiumConfigResponse"];
        };
      };
      403: never;
      /** @description Failed to retrieve project's pgsodium config */
      500: never;
    };
  };
  /** [Beta] Updates project's pgsodium config. Updating the root_key can cause all data encrypted with the older key to become inaccessible. */
  "v1-update-pgsodium-config": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePgsodiumConfigBody"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PgsodiumConfigResponse"];
        };
      };
      403: never;
      /** @description Failed to update project's pgsodium config */
      500: never;
    };
  };
  /** Gets project's postgrest config */
  "v1-get-postgrest-service-config": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PostgrestConfigWithJWTSecretResponse"];
        };
      };
      403: never;
      /** @description Failed to retrieve project's postgrest config */
      500: never;
    };
  };
  /** Updates project's postgrest config */
  "v1-update-postgrest-service-config": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["V1UpdatePostgrestConfigBody"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["V1PostgrestConfigResponse"];
        };
      };
      403: never;
      /** @description Failed to update project's postgrest config */
      500: never;
    };
  };
  /** Gets a specific project that belongs to the authenticated user */
  "v1-get-project": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["V1ProjectWithDatabaseResponse"];
        };
      };
      403: never;
      /** @description Failed to retrieve project */
      500: never;
    };
  };
  /** Deletes the given project */
  "v1-delete-a-project": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["V1ProjectRefResponse"];
        };
      };
      403: never;
    };
  };
  /**
   * List all secrets 
   * @description Returns all secrets you've previously added to the specified project.
   */
  "v1-list-all-secrets": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["SecretResponse"])[];
        };
      };
      403: never;
      /** @description Failed to retrieve project's secrets */
      500: never;
    };
  };
  /**
   * Bulk create secrets 
   * @description Creates multiple secrets and adds them to the specified project.
   */
  "v1-bulk-create-secrets": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSecretBody"];
      };
    };
    responses: {
      201: never;
      403: never;
      /** @description Failed to create project's secrets */
      500: never;
    };
  };
  /**
   * Bulk delete secrets 
   * @description Deletes all secrets with the given names from the specified project
   */
  "v1-bulk-delete-secrets": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": (string)[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      403: never;
      /** @description Failed to delete secrets with given names */
      500: never;
    };
  };
  /** [Beta] Get project's SSL enforcement configuration. */
  "v1-get-ssl-enforcement-config": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SslEnforcementResponse"];
        };
      };
      403: never;
      /** @description Failed to retrieve project's SSL enforcement config */
      500: never;
    };
  };
  /** [Beta] Update project's SSL enforcement configuration. */
  "v1-update-ssl-enforcement-config": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SslEnforcementRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SslEnforcementResponse"];
        };
      };
      403: never;
      /** @description Failed to update project's SSL enforcement configuration. */
      500: never;
    };
  };
  /**
   * Generate TypeScript types 
   * @description Returns the TypeScript types of your schema for use with supabase-js.
   */
  "v1-generate-typescript-types": {
    parameters: {
      query?: {
        included_schemas?: string;
      };
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TypescriptResponse"];
        };
      };
      403: never;
      /** @description Failed to generate TypeScript types */
      500: never;
    };
  };
  /** [Beta] Gets current vanity subdomain config */
  "v1-get-vanity-subdomain-config": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["VanitySubdomainConfigResponse"];
        };
      };
      403: never;
      /** @description Failed to get project vanity subdomain configuration */
      500: never;
    };
  };
  /** [Beta] Deletes a project's vanity subdomain configuration */
  "v1-deactivate-vanity-subdomain-config": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: never;
      403: never;
      /** @description Failed to delete project vanity subdomain configuration */
      500: never;
    };
  };
  /** [Beta] Checks vanity subdomain availability */
  "v1-check-vanity-subdomain-availability": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VanitySubdomainBody"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SubdomainAvailabilityResponse"];
        };
      };
      403: never;
      /** @description Failed to check project vanity subdomain configuration */
      500: never;
    };
  };
  /** [Beta] Activates a vanity subdomain for a project. */
  "v1-activate-vanity-subdomain-config": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VanitySubdomainBody"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ActivateVanitySubdomainResponse"];
        };
      };
      403: never;
      /** @description Failed to activate project vanity subdomain configuration */
      500: never;
    };
  };
  /** [Beta] Upgrades the project's Postgres version */
  "v1-upgrade-postgres-version": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpgradeDatabaseBody"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ProjectUpgradeInitiateResponse"];
        };
      };
      403: never;
      /** @description Failed to initiate project upgrade */
      500: never;
    };
  };
  /** [Beta] Returns the project's eligibility for upgrades */
  "v1-get-postgres-upgrade-eligibility": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProjectUpgradeEligibilityResponse"];
        };
      };
      403: never;
      /** @description Failed to determine project upgrade eligibility */
      500: never;
    };
  };
  /** [Beta] Gets the latest status of the project's upgrade */
  "v1-get-postgres-upgrade-status": {
    parameters: {
      query?: {
        tracking_id?: string;
      };
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DatabaseUpgradeStatusResponse"];
        };
      };
      403: never;
      /** @description Failed to retrieve project upgrade status */
      500: never;
    };
  };
  /** Returns project's readonly mode status */
  "v1-get-readonly-mode-status": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ReadOnlyStatusResponse"];
        };
      };
      403: never;
      /** @description Failed to get project readonly mode status */
      500: never;
    };
  };
  /** Disables project's readonly mode for the next 15 minutes */
  "v1-disable-readonly-mode-temporarily": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      201: never;
      403: never;
      /** @description Failed to disable project's readonly mode */
      500: never;
    };
  };
  /** [Beta] Set up a read replica */
  "v1-setup-a-read-replica": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetUpReadReplicaBody"];
      };
    };
    responses: {
      201: never;
      403: never;
      /** @description Failed to set up read replica */
      500: never;
    };
  };
  /** [Beta] Remove a read replica */
  "v1-remove-a-read-replica": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RemoveReadReplicaBody"];
      };
    };
    responses: {
      201: never;
      403: never;
      /** @description Failed to remove read replica */
      500: never;
    };
  };
  /** Gets project's service health status */
  "v1-get-services-health": {
    parameters: {
      query: {
        services: string;
        timeout_ms?: number;
      };
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["V1ServiceHealthResponse"])[];
        };
      };
      403: never;
      /** @description Failed to retrieve project's service health status */
      500: never;
    };
  };
  /** [Alpha] List all signing keys for the project */
  listSigningKeysForProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SigningKeysResponse"];
        };
      };
      403: never;
    };
  };
  /** [Alpha] Create a new signing key for the project in standby status */
  createSigningKeyForProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSigningKeyBody"];
      };
    };
    responses: {
      /** @description [Alpha] Create a new signing key for the project in standby status */
      201: {
        content: {
          "application/json": components["schemas"]["CreateSigningKeyBody"];
        };
      };
      403: never;
    };
  };
  /** [Alpha] Get information about a signing key */
  getSigningKeyForProject: {
    parameters: {
      path: {
        id: string;
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SigningKeyResponse"];
        };
      };
      403: never;
    };
  };
  /** [Alpha] Remove a signing key from a project, where the status is previously_used */
  deleteSigningKey: {
    parameters: {
      path: {
        id: string;
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SigningKeyResponse"];
        };
      };
      403: never;
    };
  };
  /** [Alpha] Update a signing key, mainly its status */
  patchSigningKey: {
    parameters: {
      path: {
        id: string;
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSigningKeyBody"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SigningKeyResponse"];
        };
      };
      403: never;
    };
  };
  /** Gets project's storage config */
  "v1-get-storage-config": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StorageConfigResponse"];
        };
      };
      403: never;
      /** @description Failed to retrieve project's storage config */
      500: never;
    };
  };
  /** Updates project's storage config */
  "v1-update-storage-config": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateStorageConfigBody"];
      };
    };
    responses: {
      200: never;
      403: never;
      /** @description Failed to update project's storage config */
      500: never;
    };
  };
  /** Gets project's Postgres config */
  "v1-get-postgres-config": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PostgresConfigResponse"];
        };
      };
      403: never;
      /** @description Failed to retrieve project's Postgres config */
      500: never;
    };
  };
  /** Updates project's Postgres config */
  "v1-update-postgres-config": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePostgresConfigBody"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PostgresConfigResponse"];
        };
      };
      403: never;
      /** @description Failed to update project's Postgres config */
      500: never;
    };
  };
  /** Get project's pgbouncer config */
  "v1-get-project-pgbouncer-config": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["V1PgbouncerConfigResponse"];
        };
      };
      403: never;
      /** @description Failed to retrieve project's pgbouncer config */
      500: never;
    };
  };
  /** Gets project's supavisor config */
  getSupavisorConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["SupavisorConfigResponse"])[];
        };
      };
      /** @description Failed to retrieve project's supavisor config */
      500: never;
    };
  };
  /** Updates project's supavisor config */
  updateSupavisorConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSupavisorConfigBody"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UpdateSupavisorConfigResponse"];
        };
      };
      403: never;
      /** @description Failed to update project's supavisor config */
      500: never;
    };
  };
  /** Gets project's auth config */
  "v1-get-auth-service-config": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AuthConfigResponse"];
        };
      };
      403: never;
      /** @description Failed to retrieve project's auth config */
      500: never;
    };
  };
  /** Updates a project's auth config */
  "v1-update-auth-service-config": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateAuthConfigBody"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AuthConfigResponse"];
        };
      };
      403: never;
      /** @description Failed to update project's auth config */
      500: never;
    };
  };
  /** Lists all third-party auth integrations */
  listTPAForProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["ThirdPartyAuth"])[];
        };
      };
      403: never;
    };
  };
  /** Creates a new third-party auth integration */
  createTPAForProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateThirdPartyAuthBody"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ThirdPartyAuth"];
        };
      };
      403: never;
    };
  };
  /** Get a third-party integration */
  getTPAForProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
        tpa_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ThirdPartyAuth"];
        };
      };
      403: never;
    };
  };
  /** Removes a third-party auth integration */
  deleteTPAForProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
        tpa_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ThirdPartyAuth"];
        };
      };
      403: never;
    };
  };
  /** Pauses the given project */
  "v1-pause-a-project": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: never;
      403: never;
    };
  };
  /** Lists available restore versions for the given project */
  "v1-list-available-restore-versions": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetProjectAvailableRestoreVersionsResponse"];
        };
      };
      403: never;
    };
  };
  /** Restores the given project */
  "v1-restore-a-project": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: never;
      403: never;
    };
  };
  /** Cancels the given project restoration */
  "v1-cancel-a-project-restoration": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: never;
      403: never;
    };
  };
  /** Lists project addons */
  "v1-list-project-addons": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ListProjectAddonsResponseDto"];
        };
      };
      403: never;
      /** @description Failed to list project addons */
      500: never;
    };
  };
  /** Applies project addon */
  "v1-apply-project-addon": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplyProjectAddonBodyDto"];
      };
    };
    responses: {
      200: never;
      403: never;
      /** @description Failed to apply project addon */
      500: never;
    };
  };
  /** Removes project addon */
  "v1-remove-project-addon": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
        addon_variant: unknown;
      };
    };
    responses: {
      200: never;
      403: never;
      /** @description Failed to remove project addon */
      500: never;
    };
  };
  /**
   * Gets project performance advisors. 
   * @deprecated 
   * @description This is an **experimental** endpoint. It is subject to change or removal in future versions. Use it with caution, as it may not remain supported or stable.
   */
  getPerformanceAdvisors: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["V1ProjectAdvisorsResponseDto"];
        };
      };
      403: never;
    };
  };
  /**
   * Gets project security advisors. 
   * @deprecated 
   * @description This is an **experimental** endpoint. It is subject to change or removal in future versions. Use it with caution, as it may not remain supported or stable.
   */
  getSecurityAdvisors: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["V1ProjectAdvisorsResponseDto"];
        };
      };
      403: never;
    };
  };
  /**
   * Gets project's logs 
   * @description Executes a SQL query on the project's logs.
   * 
   * Either the 'iso_timestamp_start' and 'iso_timestamp_end' parameters must be provided.
   * If both are not provided, only the last 1 minute of logs will be queried.
   * The timestamp range must be no more than 24 hours and is rounded to the nearest minute. If the range is more than 24 hours, a validation error will be thrown.
   */
  getLogs: {
    parameters: {
      query?: {
        sql?: string;
        iso_timestamp_start?: string;
        iso_timestamp_end?: string;
      };
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["V1AnalyticsResponse"];
        };
      };
      403: never;
    };
  };
  /**
   * [Beta] List applied migration versions 
   * @description Only available to selected partner OAuth apps
   */
  "v1-list-migrations": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["V1ListMigrationsResponse"];
        };
      };
      403: never;
      /** @description Failed to list database migrations */
      500: never;
    };
  };
  /**
   * [Beta] Apply a database migration 
   * @description Only available to selected partner OAuth apps
   */
  "v1-apply-a-migration": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["V1CreateMigrationBody"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      403: never;
      /** @description Failed to apply database migration */
      500: never;
    };
  };
  /** [Beta] Run sql query */
  "v1-run-a-query": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["V1RunQueryBody"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      403: never;
      /** @description Failed to run sql query */
      500: never;
    };
  };
  /** [Beta] Enables Database Webhooks on the project */
  "v1-enable-database-webhook": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      201: never;
      403: never;
      /** @description Failed to enable Database Webhooks on the project */
      500: never;
    };
  };
  /**
   * Gets database metadata for the given project. 
   * @deprecated 
   * @description This is an **experimental** endpoint. It is subject to change or removal in future versions. Use it with caution, as it may not remain supported or stable.
   */
  getDatabaseMetadata: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetProjectDbMetadataResponseDto"];
        };
      };
      403: never;
    };
  };
  /**
   * List all functions 
   * @description Returns all functions you've previously added to the specified project.
   */
  "v1-list-all-functions": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["FunctionResponse"])[];
        };
      };
      403: never;
      /** @description Failed to retrieve project's functions */
      500: never;
    };
  };
  /**
   * Bulk update functions 
   * @description Bulk update functions. It will create a new function or replace existing. The operation is idempotent. NOTE: You will need to manually bump the version.
   */
  "v1-bulk-update-functions": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BulkUpdateFunctionBody"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BulkUpdateFunctionResponse"];
        };
      };
      403: never;
      /** @description Failed to update functions */
      500: never;
    };
  };
  /**
   * Create a function 
   * @deprecated 
   * @description This endpoint is deprecated - use the deploy endpoint. Creates a function and adds it to the specified project.
   */
  "v1-create-a-function": {
    parameters: {
      query?: {
        slug?: string;
        name?: string;
        verify_jwt?: string;
        import_map?: string;
        entrypoint_path?: string;
        import_map_path?: string;
      };
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["FunctionResponse"];
        };
      };
      403: never;
      /** @description Failed to create project's function */
      500: never;
    };
  };
  /**
   * Deploy a function 
   * @description A new endpoint to deploy functions. It will create if function does not exist.
   */
  "v1-deploy-a-function": {
    parameters: {
      query?: {
        slug?: string;
        bundleOnly?: string;
      };
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DeployFunctionResponse"];
        };
      };
      403: never;
      /** @description Failed to deploy function */
      500: never;
    };
  };
  /**
   * Retrieve a function 
   * @description Retrieves a function with the specified slug and project.
   */
  "v1-get-a-function": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
        /** @description Function slug */
        function_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FunctionSlugResponse"];
        };
      };
      403: never;
      /** @description Failed to retrieve function with given slug */
      500: never;
    };
  };
  /**
   * Delete a function 
   * @description Deletes a function with the specified slug from the specified project.
   */
  "v1-delete-a-function": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
        /** @description Function slug */
        function_slug: string;
      };
    };
    responses: {
      200: never;
      403: never;
      /** @description Failed to delete function with given slug */
      500: never;
    };
  };
  /**
   * Update a function 
   * @description Updates a function with the specified slug and project.
   */
  "v1-update-a-function": {
    parameters: {
      query?: {
        slug?: string;
        name?: string;
        verify_jwt?: string;
        import_map?: string;
        entrypoint_path?: string;
        import_map_path?: string;
      };
      path: {
        /** @description Project ref */
        ref: string;
        /** @description Function slug */
        function_slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FunctionResponse"];
        };
      };
      403: never;
      /** @description Failed to update function with given slug */
      500: never;
    };
  };
  /**
   * Retrieve a function body 
   * @description Retrieves a function body for the specified slug and project.
   */
  "v1-get-a-function-body": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
        /** @description Function slug */
        function_slug: string;
      };
    };
    responses: {
      200: never;
      403: never;
      /** @description Failed to retrieve function body with given slug */
      500: never;
    };
  };
  /** Lists all buckets */
  "v1-list-all-buckets": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["V1StorageBucketResponse"])[];
        };
      };
      403: never;
      /** @description Failed to get list of buckets */
      500: never;
    };
  };
  /** Lists all SSO providers */
  "v1-list-all-sso-provider": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ListProvidersResponse"];
        };
      };
      403: never;
      /** @description SAML 2.0 support is not enabled for this project */
      404: never;
    };
  };
  /** Creates a new SSO provider */
  "v1-create-a-sso-provider": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProviderBody"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["CreateProviderResponse"];
        };
      };
      403: never;
      /** @description SAML 2.0 support is not enabled for this project */
      404: never;
    };
  };
  /** Gets a SSO provider by its UUID */
  "v1-get-a-sso-provider": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
        provider_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetProviderResponse"];
        };
      };
      403: never;
      /** @description Either SAML 2.0 was not enabled for this project, or the provider does not exist */
      404: never;
    };
  };
  /** Updates a SSO provider by its UUID */
  "v1-update-a-sso-provider": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
        provider_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProviderBody"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UpdateProviderResponse"];
        };
      };
      403: never;
      /** @description Either SAML 2.0 was not enabled for this project, or the provider does not exist */
      404: never;
    };
  };
  /** Removes a SSO provider by its UUID */
  "v1-delete-a-sso-provider": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
        provider_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DeleteProviderResponse"];
        };
      };
      403: never;
      /** @description Either SAML 2.0 was not enabled for this project, or the provider does not exist */
      404: never;
    };
  };
  /** Lists all backups */
  "v1-list-all-backups": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["V1BackupsResponse"];
        };
      };
      403: never;
      /** @description Failed to get backups */
      500: never;
    };
  };
  /** Restores a PITR backup for a database */
  "v1-restore-pitr-backup": {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["V1RestorePitrBody"];
      };
    };
    responses: {
      201: never;
      403: never;
    };
  };
  /** List members of an organization */
  "v1-list-organization-members": {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": (components["schemas"]["V1OrganizationMemberResponse"])[];
        };
      };
      403: never;
    };
  };
  /** Gets information about the organization */
  "v1-get-an-organization": {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["V1OrganizationSlugResponse"];
        };
      };
      403: never;
    };
  };
}
